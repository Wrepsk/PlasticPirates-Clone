//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BoatMovement"",
            ""id"": ""e70b7f3f-37c2-4d4c-8cbe-d27782addfba"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""88b18380-f6e4-4c35-ad66-41b21bd76ffb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5141ece7-8e06-493a-a926-9a3ababe8684"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BoatMovement"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c714fd70-76cd-46f9-b11a-d841941a2ea2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4fd99f71-a17e-4d2f-96fa-ed5b0b05da7c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9d98e9ca-799d-45e2-8a22-ef4788c1cdf6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4e38d548-ebd3-4bc3-9c4f-21e07ebc135e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""40eeab39-58d7-4da7-af79-2f8ea8dc6347"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BoatMovement"",
            ""bindingGroup"": ""BoatMovement"",
            ""devices"": []
        }
    ]
}");
        // BoatMovement
        m_BoatMovement = asset.FindActionMap("BoatMovement", throwIfNotFound: true);
        m_BoatMovement_Move = m_BoatMovement.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BoatMovement
    private readonly InputActionMap m_BoatMovement;
    private List<IBoatMovementActions> m_BoatMovementActionsCallbackInterfaces = new List<IBoatMovementActions>();
    private readonly InputAction m_BoatMovement_Move;
    public struct BoatMovementActions
    {
        private @PlayerControls m_Wrapper;
        public BoatMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BoatMovement_Move;
        public InputActionMap Get() { return m_Wrapper.m_BoatMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoatMovementActions set) { return set.Get(); }
        public void AddCallbacks(IBoatMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_BoatMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BoatMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IBoatMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IBoatMovementActions instance)
        {
            if (m_Wrapper.m_BoatMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBoatMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_BoatMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BoatMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BoatMovementActions @BoatMovement => new BoatMovementActions(this);
    private int m_BoatMovementSchemeIndex = -1;
    public InputControlScheme BoatMovementScheme
    {
        get
        {
            if (m_BoatMovementSchemeIndex == -1) m_BoatMovementSchemeIndex = asset.FindControlSchemeIndex("BoatMovement");
            return asset.controlSchemes[m_BoatMovementSchemeIndex];
        }
    }
    public interface IBoatMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
